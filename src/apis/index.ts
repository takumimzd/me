/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Recipe API
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type { Recipe, User } from './types';

/**
 * @summary Get all recipes
 */
export const getApiRecipes = (options?: AxiosRequestConfig): Promise<AxiosResponse<Recipe[]>> => {
  return axios.get(`/api/recipes`, options);
};

export const getGetApiRecipesKey = () => [`/api/recipes`] as const;

export type GetApiRecipesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRecipes>>>;
export type GetApiRecipesQueryError = AxiosError<unknown>;

/**
 * @summary Get all recipes
 */
export const useGetApiRecipes = <TError = AxiosError<unknown>>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiRecipes>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
  axios?: AxiosRequestConfig;
}) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiRecipesKey() : null));
  const swrFn = () => getApiRecipes(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Get a recipe by ID
 */
export const getApiRecipesId = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Recipe>> => {
  return axios.get(`/api/recipes/${id}`, options);
};

export const getGetApiRecipesIdKey = (id: number) => [`/api/recipes/${id}`] as const;

export type GetApiRecipesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRecipesId>>>;
export type GetApiRecipesIdQueryError = AxiosError<unknown>;

/**
 * @summary Get a recipe by ID
 */
export const useGetApiRecipesId = <TError = AxiosError<unknown>>(
  id: number,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiRecipesId>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!id;
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiRecipesIdKey(id) : null));
  const swrFn = () => getApiRecipesId(id, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Get all users
 */
export const getApiUsers = (options?: AxiosRequestConfig): Promise<AxiosResponse<User[]>> => {
  return axios.get(`/api/users`, options);
};

export const getGetApiUsersKey = () => [`/api/users`] as const;

export type GetApiUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsers>>>;
export type GetApiUsersQueryError = AxiosError<unknown>;

/**
 * @summary Get all users
 */
export const useGetApiUsers = <TError = AxiosError<unknown>>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiUsers>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
  axios?: AxiosRequestConfig;
}) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiUsersKey() : null));
  const swrFn = () => getApiUsers(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Get a user by ID
 */
export const getApiUsersId = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<User>> => {
  return axios.get(`/api/users/${id}`, options);
};

export const getGetApiUsersIdKey = (id: number) => [`/api/users/${id}`] as const;

export type GetApiUsersIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsersId>>>;
export type GetApiUsersIdQueryError = AxiosError<unknown>;

/**
 * @summary Get a user by ID
 */
export const useGetApiUsersId = <TError = AxiosError<unknown>>(
  id: number,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiUsersId>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!id;
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiUsersIdKey(id) : null));
  const swrFn = () => getApiUsersId(id, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
