/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Recipe API
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type { Recipe, RecipeIngredient, RecipeStep, User } from './types';

/**
 * @summary Get all recipes
 */
export const getApiRecipes = (options?: AxiosRequestConfig): Promise<AxiosResponse<Recipe[]>> => {
  return axios.get(`/api/recipes`, options);
};

export const getGetApiRecipesKey = () => [`/api/recipes`] as const;

export type GetApiRecipesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRecipes>>>;
export type GetApiRecipesQueryError = AxiosError<unknown>;

/**
 * @summary Get all recipes
 */
export const useGetApiRecipes = <TError = AxiosError<unknown>>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiRecipes>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
  axios?: AxiosRequestConfig;
}) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiRecipesKey() : null));
  const swrFn = () => getApiRecipes(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Get a recipe by ID
 */
export const getApiRecipesRecipeId = (
  recipeId: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Recipe>> => {
  return axios.get(`/api/recipes/${recipeId}`, options);
};

export const getGetApiRecipesRecipeIdKey = (recipeId: number) =>
  [`/api/recipes/${recipeId}`] as const;

export type GetApiRecipesRecipeIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiRecipesRecipeId>>
>;
export type GetApiRecipesRecipeIdQueryError = AxiosError<unknown>;

/**
 * @summary Get a recipe by ID
 */
export const useGetApiRecipesRecipeId = <TError = AxiosError<unknown>>(
  recipeId: number,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiRecipesRecipeId>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!recipeId;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiRecipesRecipeIdKey(recipeId) : null));
  const swrFn = () => getApiRecipesRecipeId(recipeId, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Get a recipe ingredients by recipeId
 */
export const getApiRecipesRecipeIdIngredients = (
  recipeId: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<RecipeIngredient[]>> => {
  return axios.get(`/api/recipes/${recipeId}/ingredients`, options);
};

export const getGetApiRecipesRecipeIdIngredientsKey = (recipeId: number) =>
  [`/api/recipes/${recipeId}/ingredients`] as const;

export type GetApiRecipesRecipeIdIngredientsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiRecipesRecipeIdIngredients>>
>;
export type GetApiRecipesRecipeIdIngredientsQueryError = AxiosError<unknown>;

/**
 * @summary Get a recipe ingredients by recipeId
 */
export const useGetApiRecipesRecipeIdIngredients = <TError = AxiosError<unknown>>(
  recipeId: number,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiRecipesRecipeIdIngredients>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!recipeId;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetApiRecipesRecipeIdIngredientsKey(recipeId) : null));
  const swrFn = () => getApiRecipesRecipeIdIngredients(recipeId, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Get a recipe steps by recipeId
 */
export const getApiRecipesRecipeIdSteps = (
  recipeId: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<RecipeStep[]>> => {
  return axios.get(`/api/recipes/${recipeId}/steps`, options);
};

export const getGetApiRecipesRecipeIdStepsKey = (recipeId: number) =>
  [`/api/recipes/${recipeId}/steps`] as const;

export type GetApiRecipesRecipeIdStepsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiRecipesRecipeIdSteps>>
>;
export type GetApiRecipesRecipeIdStepsQueryError = AxiosError<unknown>;

/**
 * @summary Get a recipe steps by recipeId
 */
export const useGetApiRecipesRecipeIdSteps = <TError = AxiosError<unknown>>(
  recipeId: number,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiRecipesRecipeIdSteps>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!recipeId;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiRecipesRecipeIdStepsKey(recipeId) : null));
  const swrFn = () => getApiRecipesRecipeIdSteps(recipeId, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Get all users
 */
export const getApiUsers = (options?: AxiosRequestConfig): Promise<AxiosResponse<User[]>> => {
  return axios.get(`/api/users`, options);
};

export const getGetApiUsersKey = () => [`/api/users`] as const;

export type GetApiUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsers>>>;
export type GetApiUsersQueryError = AxiosError<unknown>;

/**
 * @summary Get all users
 */
export const useGetApiUsers = <TError = AxiosError<unknown>>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiUsers>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
  axios?: AxiosRequestConfig;
}) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiUsersKey() : null));
  const swrFn = () => getApiUsers(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Get a user by ID
 */
export const getApiUsersUserId = (
  userId: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<User>> => {
  return axios.get(`/api/users/${userId}`, options);
};

export const getGetApiUsersUserIdKey = (userId: number) => [`/api/users/${userId}`] as const;

export type GetApiUsersUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsersUserId>>
>;
export type GetApiUsersUserIdQueryError = AxiosError<unknown>;

/**
 * @summary Get a user by ID
 */
export const useGetApiUsersUserId = <TError = AxiosError<unknown>>(
  userId: number,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiUsersUserId>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!userId;
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiUsersUserIdKey(userId) : null));
  const swrFn = () => getApiUsersUserId(userId, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
